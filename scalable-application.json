{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFormation template to create a scalable application stack",
  "Parameters": {
    "VPCNameParameter": {
      "Type": "String",
      "Default": "VPC-01",
      "Description": "Enter the name of the VPC"
    },
    "VPCCIDRParameter": {
      "Type": "String",
      "Default": "10.10.0.0/16",
      "Description": "Enter the VPC CIDR block"
    },
    "RouteTableNameParameter": {
      "Type": "String",
      "Default": "VPC-01-RT",
      "Description": "Enter the name of the Route Table"
    },
    "Subnet01CidrParameter": {
      "Type": "String",
      "Default": "10.10.1.0/24",
      "Description": "Enter the VPC CIDR block for Subnet 1"
    },
    "Subnet01NameParameter": {
      "Type": "String",
      "Default": "Subnet01",
      "Description": "Enter the name of the VPC CIDR block for Subnet 1"
    },
    "Subnet02CidrParameter": {
      "Type": "String",
      "Default": "10.10.2.0/24",
      "Description": "Enter the VPC CIDR block for Subnet 2"
    },
    "Subnet02NameParameter": {
      "Type": "String",
      "Default": "Subnet02",
      "Description": "Enter the name of the VPC CIDR block for Subnet 2"
    },
    "Subnet03CidrParameter": {
      "Type": "String",
      "Default": "10.10.3.0/24",
      "Description": "Enter the VPC CIDR block for Subnet 3"
    },
    "Subnet03NameParameter": {
      "Type": "String",
      "Default": "Subnet03",
      "Description": "Enter the name of the VPC CIDR block for Subnet 3"
    },
    "InternetGatewayNameParameter": {
      "Type": "String",
      "Default": "VPC-01-IG",
      "Description": "Enter the name of the Internet Gateway"
    },
    "AMIIDParameter": {
      "Type": "String",
      "Description": "Enter the AMI ID to use in the EC2 instances"
    },
    "CodeDeployS3BucketName": {
      "Type": "String",
      "Description": "Enter the name of the S3 used to deploy the code"
    },
    "DomainName": {
      "Type": "String",
      "Description": "Enter the name of the domain which is registered with Route53"
    },
    "SSLCertificateARN": {
      "Type": "String",
      "Description": "Enter the ARN of the SSL certificate which is present in Amazon Certificate Manager to add it to the LoadBalancer to use HTTPS"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDRParameter"
        },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCNameParameter"
            }
          }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "RouteTableNameParameter"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "Subnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "Subnet01CidrParameter"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Subnet01NameParameter"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "Subnet02": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "Subnet02CidrParameter"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Subnet02NameParameter"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "Subnet03": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "Subnet03CidrParameter"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Subnet03NameParameter"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "InternetGatewayNameParameter"
            }
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RouteTableAssociation01": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet01"
        }
      }
    },
    "RouteTableAssociation02": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet02"
        }
      }
    },
    "RouteTableAssociation03": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet03"
        }
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "EC2InstanceProfile",
        "Roles": [
          {
            "Ref": "EC2CSYE6225"
          }
        ]
      }
    },
    "EC2CSYE6225": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": "EC2-CSYE6225"
      }
    },
    "WebAppS3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "EncryptedS3Bucket",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "EncryptedS3Bucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "WebAppS3",
        "Roles": [
          {
            "Ref": "EC2CSYE6225"
          }
        ]
      }
    },
    "DatabaseSecurityGroupRDS": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "VPC",
      "Properties": {
        "GroupDescription": "Open up database access ports",
        "GroupName": "Database Security Group",
        "VpcId": {
          "Fn::GetAtt": [
            "Subnet01",
            "VpcId"
          ]
        }
      }
    },
    "DatabaseSecurityGroupIngressRDS": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "DatabaseSecurityGroupRDS"
        },
        "IpProtocol": "tcp",
        "FromPort": 3306,
        "ToPort": 3306,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "WebAppSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "EncryptedS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Status": "Enabled",
              "Transitions": [
                {
                  "TransitionInDays": 30,
                  "StorageClass": "STANDARD_IA"
                }
              ]
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "RDSDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.t3.micro",
        "MultiAZ": false,
        "MasterUsername": "dbuser",
        "StorageEncrypted": true,
        "MasterUserPassword": "dbuserpassword123",
        "DBInstanceIdentifier": "csye6225-spring2020",
        "DBName": "csye6225",
        "Engine": "MySQL",
        "PubliclyAccessible": false,
        "VPCSecurityGroups": [
          {
            "Ref": "DatabaseSecurityGroupRDS"
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "RDSDBSubnetGroup"
        }
      }
    },
    "RDSDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "DependsOn": "VPC",
      "Properties": {
        "DBSubnetGroupDescription": "Database Subnet Group for RDS",
        "DBSubnetGroupName": "SubnetGroupRDS",
        "SubnetIds": [
          {
            "Ref": "Subnet02"
          },
          {
            "Ref": "Subnet03"
          }
        ]
      }
    },
    "IAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "cicd",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CircleCIUploadToS3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CodeDeployS3BucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CircleCI-Upload-To-S3",
        "Users": [
          "circleci"
        ]
      }
    },
    "CircleCICodeDeploy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApplication}"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.OneAtATime"
                },
                {
                  "Fn::Sub": "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.HalfAtATime"
                },
                {
                  "Fn::Sub": "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.AllAtOnce"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${CodeDeployGroup}"
                }
              ]
            }
          ]
        },
        "PolicyName": "CircleCI-Code-Deploy",
        "Users": [
          "circleci"
        ]
      }
    },
    "CircleCIEC2AMI": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:AttachVolume",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CopyImage",
                "ec2:CreateImage",
                "ec2:CreateKeypair",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:DeleteKeyPair",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteSnapshot",
                "ec2:DeleteVolume",
                "ec2:DeregisterImage",
                "ec2:DescribeImageAttribute",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeRegions",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSnapshots",
                "ec2:DescribeSubnets",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes",
                "ec2:DetachVolume",
                "ec2:GetPasswordData",
                "ec2:ModifyImageAttribute",
                "ec2:ModifyInstanceAttribute",
                "ec2:ModifySnapshotAttribute",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances",
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "CircleCI-EC2-AMI",
        "Users": [
          "circleci"
        ]
      }
    },
    "CircleCILambdaRole": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "LambdaFunction",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:BillDueService"
                }
              ]
            }
          ]
        },
        "PolicyName": "CircleCILambdaRole",
        "Users": [
          "circleci"
        ]
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "billmanagement-webapp",
        "ComputePlatform": "Server"
      }
    },
    "CodeDeployGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "DeploymentGroupName": "billmanagement-webapp-deployment",
        "ApplicationName": {
          "Ref": "CodeDeployApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        },
        "DeploymentStyle": {
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
          "DeploymentType": "IN_PLACE"
        },
        "Ec2TagFilters": [
          {
            "Key": "aws:cloudformation:stack-name",
            "Type": "KEY_AND_VALUE",
            "Value": {
              "Fn::Sub": "${AWS::StackName}"
            }
          }
        ],
        "AutoScalingGroups": [
          {
            "Ref": "WebServerGroup"
          }
        ]
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CodeDeployServiceRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        ],
        "RoleName": "CodeDeployEC2ServiceRole"
      }
    },
    "CodeDeployEC2S3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${CodeDeployS3BucketName}"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${CodeDeployS3BucketName}/*"
                }
              ]
            },
            {
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "EncryptedS3Bucket",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "EncryptedS3Bucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CodeDeploy-EC2-S3",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CodeDeployServiceRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "RoleName": "CodeDeployServiceRole"
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 5% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 3% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "3",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "RDSDB",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "KeyName": "awsdemodev",
        "ImageId": {
          "Ref": "AMIIDParameter"
        },
        "SecurityGroups": [
          {
            "Ref": "WebAppSecurityGroup"
          }
        ],
        "InstanceType": "t2.micro",
        "IamInstanceProfile": {
          "Ref": "IAMProfile"
        },
        "LaunchConfigurationName": "asg_launch_config",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": "true",
              "VolumeSize": "20"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "cd /etc/profile.d\n",
                "sudo touch userdata.sh\n",
                "sudo echo export RDS_USERNAME=dbuser",
                " >> userdata.sh\n",
                "sudo echo export RDS_PASSWORD=dbuserpassword123",
                " >> userdata.sh\n",
                "sudo echo export RDS_HOSTNAME=",
                {
                  "Fn::GetAtt": [
                    "RDSDB",
                    "Endpoint.Address"
                  ]
                },
                " >> userdata.sh\n",
                "sudo echo export S3_BUCKET_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "EncryptedS3Bucket",
                    "DomainName"
                  ]
                },
                " >> userdata.sh\n",
                "sudo echo export DOMAIN_NAME=",
                {
                  "Ref": "DomainName"
                },
                " >> userdata.sh\n",
                "sudo echo export APPLICATION_ENV=prod",
                " >> userdata.sh\n"
              ]
            ]
          }
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "ElasticLoadBalancer",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet01"
          },
          {
            "Ref": "Subnet02"
          },
          {
            "Ref": "Subnet03"
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "LoadBalancerTargetGroup"
          }
        ],
        "Cooldown": "60",
        "MinSize": "1",
        "MaxSize": "3",
        "DesiredCapacity": "2"
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Fn::Sub": "${SSLCertificateARN}"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "LoadBalancerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ElasticLoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "LoadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "WebAppTargetGroup",
        "Port": 3000,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "Subnet01"
          },
          {
            "Ref": "Subnet02"
          },
          {
            "Ref": "Subnet03"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "LoadBalancerSecurityGroup",
        "GroupDescription": "Open HTTP access to port 443 for HTTPS",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "ElasticLoadBalancer",
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "ElasticLoadBalancer",
              "DNSName"
            ]
          },
          "EvaluateTargetHealth": "true",
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ElasticLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DomainName"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DomainName"
              },
              "."
            ]
          ]
        },
        "Type": "A"
      }
    },
    "WebAppSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Application can be accessed from the load balancer only",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "SourceSecurityGroupId": {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "SecurityGroups"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "emailrequest",
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "LambdaExecutionRole",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "exports.billDueService = function (event, context, callback){ callback(null); }"
              ]
            ]
          }
        },
        "FunctionName": "BillDueService",
        "Handler": "index.billDueService",
        "Environment": {
          "Variables": {
            "DOMAIN_NAME": {
              "Fn::Sub": "${DomainName}"
            },
            "RDS_USERNAME": "dbuser",
            "RDS_PASSWORD": "dbuserpassword123",
            "RDS_HOSTNAME": {
              "Fn::GetAtt": [
                "RDSDB",
                "Endpoint.Address"
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 20
      }
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "DependsOn": "LambdaFunction",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ],
        "TopicName": "BillDueEmailTopic"
      }
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "SNS",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "SNS"
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
        ]
      }
    },
    "EmailQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "EmailQueue"
      }
    }
  },
  "Outputs": {}
}